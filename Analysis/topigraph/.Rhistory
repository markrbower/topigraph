conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4);gib$insert(e5)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4)
gib$insert(e5)
plot(grph)
plot(sub_grph)
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4);gib$insert(e5);
gib$insert(e6)
grph
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 839, c(11,10,15) ) # Store/drop e1 & e2. Should activate database.
gib$insert(e7)
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 839, c(11,10,15) ) # Store/drop e1 & e2. Should activate database.
gib$insert(e8)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
library(topigraph)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4)
gib$insert(e5)
gib$insert(e6)
gib$insert(e7)
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 839, c(11,10,15) ) # Store/drop e1 & e2. Should activate database.
gib$insert(e7)
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 839, c(11,10,15) ) # Store/drop e1 & e2. Should activate database.
gib$insert(e8)
plot(sub_grph)
tCN
grph
plot(grph)
tCN
CW
sub_grph
V(graph)$name
V(grph)$name
(V(grph)$name>=(tCN-CW) & V(grph)$name<=(tCN+CW))
sub_grph <- igraph::induced_subgraph(grph, (as.numeric(V(grph)$name)>=(tCN-CW) & as.numeric(V(grph)$name)<=(tCN+CW)),impl="auto")
sub_grph
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1
e9
gib$insert(e1);gib$insert(e2);gib$insert(e3)
library(topigraph)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
gib$insert(e4);gib$insert(e5);gib$insert(e6)
plot(grph)
gib$insert(e7);gib$insert(e8)
gib$insert(e9)
links
plot(grph)
plot(sub_grph)
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
grph
grph_
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
x <- matrix( c(1,10,4,10,10,13),byrow=TRUE)
x
x <- matrix( c(1,10,4,10,10,13),ncol=2,byrow=TRUE)
x
idx <- which( x==10)
idx
idx <- which( x!=10)
idx
x[idx]
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
grph <- gib$export()
plot(grph)
grph
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4);gib$insert(e5);gib$insert(e6)
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 839, c(11,10,15) ) # Store/drop e1 & e2. Should activate database.
gib$insert(e7)
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 839, c(11,10,15) ) # Store/drop e1 & e2. Should activate database.
gib$insert(e8)
n
gib$insert(e9)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4);gib$insert(e5);gib$insert(e6)
grph
grph <- gib$export()
grph
plot(grph)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4)
gib$insert(e5)
plot( grph)
gib$insert(e6)
gib$insert(e7)
gib$insert(e8)
gib$insert(e9)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
gib$insert(e4)
gib$insert(e5)
gib$insert(e6)
gib$insert(e7)
gib$insert(e8)
gib$insert(e9)
events_tmp
grph
plot(grph_)
rbind(as_data_frame(grph, "vertices"), as_data_frame(grph_, "vertices")) %>% unique()
as_data_frame(grph, "vertices")
as_data_frame(grph_, "vertices")
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
gib$insert(e4)
gib$insert(e5)
gib$insert(e6)
gib$insert(e7)
gib$insert(e8)
gib$insert(e9)
as_data_frame(grph, "vertices")
as_data_frame(grph_, "vertices")
plot(grph)
plot(grph)
plot(grph)
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4);gib$insert(e5);gib$insert(e6)
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 839, c(11,10,15) ) # Store/drop e1 & e2. Should activate database.
gib$insert(e7);gib$insert(e8)
gib$insert(e9)
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
conn <- topconnect::db("testProject")
query <- 'truncate P;'
rs <- DBI::dbGetQuery( conn, query )
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=2,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4);gib$insert(e5);gib$insert(e6)
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 839, c(11,10,15) ) # Store/drop e1 & e2. Should activate database.
gib$insert(e7);gib$insert(e8)
gib$insert(e9)
grph <- gib$export()
plot(grph)
e10 <- anEvent( 940, c(11,10,17) )
gib$insert(e10)
library(topigraph)
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
?dbGetQuery
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
query <- 'select * from P;'
rs <- DBI::dbGetQuery( conn, query )
conn <- db('testProject')
conn <- topigraph::db('testProject')
conn <- topconnect::db('testProject')
query <- 'select * from P;'
rs <- DBI::dbGetQuery( conn, query )
nrow(rs)
library(topigraph)
library(topigraph)
if ( file.exists('tmp.xml' ) ) {
file.remove( 'tmp.xml' )
}
parameters <- list(computationMask=c(1,2,3))
fields <- c("subject","UUID","channel","seizureUsed","time","waveform","clusterid","peak", "energy", "incident", "weights" )
dib <- topconnect::databaseInsertBuffer(conn,"P",fields,limit=5,updates=NULL)
state <- list(subject='bb8', session='02563349-e614-4a87-8d25-242496dcab8d', channel="A1", seizureUsed=1000 )
conn <- topconnect::db("testProject")
gib <- graphInsertBuffer( parameters, cw=200, cc=.8, ed=1.5, gf='tmp.xml', blackout=2, dib_=dib,state=state, conn=conn )
e1 <- anEvent( 121, c(7,10,9) )
e2 <- anEvent( 232, c(11,12,13) )
e3 <- anEvent( 243, c(11,12,14) )
gib$insert(e1);gib$insert(e2);gib$insert(e3)
E <- gib$getEvents()
expect_equal( length(E), 3 )
L <- gib$getLinks()
expect_equal( length(L), 1 )
grph <- gib$export()
expect_equal( length(V(grph)), 0 )
expect_equal( length(E(grph)), 0 )
e4 <- anEvent( 304, c(7,10,9) )
e5 <- anEvent( 365, c(11,12,11) )
e6 <- anEvent( 386, c(11,14,13) )
gib$insert(e4);gib$insert(e5);gib$insert(e6)
e7 <- anEvent( 407, c(7,10,10) )
e8 <- anEvent( 468, c(11,11,13) )
e9 <- anEvent( 489, c(11,10,15) )
gib$insert(e7);gib$insert(e8);gib$insert(e9)
E <- gib$getEvents()
E
nrow(E)
length(E)
L <- gib$getLinks()
length(L)
grph <- gib$export()
length(V(grph))
length(E(grph))
library(topigraph)
library(topigraph)
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphInsertBuffer.R')
library(topigraph)
?add.edges
x <- c(1,2,3)
y <- paste0( x, collapse=",5")
y
y <- paste0( x, collapse=",5,")
y
targets <- x
clusterid <- 5
paste0( paste0( targets, collapse=paste0( ",", clusterid, "," ) ), ",", clusterid )
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructionBuffer.R')
getwd()
setwd("topigraph/Analysis/topigraph/")
devtools::document()
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructionBuffer.R')
graphReconstructionBuffer <- function( conn, P_table='P', subject='bb8', channel='A1', seizureUsed=1000 )
grb <- graphReconstructionBuffer( conn, P_table='P', subject='bb8', channel='A1', seizureUsed=1000 )
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructionBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructionBuffer.R')
grb <- graphReconstructionBuffer( conn, P_table='P', subject='bb8', channel='A1', seizureUsed=1000 )
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructionBuffer.R')
conn
conn <- db( 'testProject')
library( topconnect)
conn <- db( 'testProject')
grb <- graphReconstructionBuffer( conn, P_table='P', subject='bb8', channel='A1', seizureUsed=1000 )
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructionBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
grb <- graphReconstructionBuffer( conn, P_table='P', subject='bb8', channel='A1', seizureUsed=1000 )
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
query <- paste0( "select time, waveform, incident, weights from ", P_table, " where" )
query <- append( query, " subject=\'", subject, "\' AND " )
query <- append( query, " channel=\'", channel, "\' AND " )
query <- append( query, " clusterid=\'", clusterid, "\' AND " )
query <- append( query, " seizureUsed=", seizureUsed, ";" )
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
grb <- graphReconstructionBuffer( conn, P_table='P', subject='bb8', channel='A1', seizureUsed=1000 )
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
source('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
debugSource('~/Dropbox/Documents/Concepts/2020_08_10_topigraph/topigraph/Analysis/topigraph/R/graphReconstructBuffer.R')
grb <- graphReconstructionBuffer( conn, P_table='P', subject='bb8', channel='A1', seizureUsed=1000 )
